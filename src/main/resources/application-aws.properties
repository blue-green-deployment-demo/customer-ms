server.port=4040
spring.application.name=customer
eureka.client.serviceUrl.defaultZone=http://ec2-54-70-136-53.us-west-2.compute.amazonaws.com/eureka/
eureka.instance.preferIpAddress=true
eureka.instance.leaseRenewalIntervalInSeconds=2
eureka.instance.leaseExpirationDurationInSeconds=1
eureka.instance.initial-status=OUT_OF_SERVICE
eureka.client.healthcheck.enabled=true

eureka.instance.metadataMap.instanceId=${spring.application.name}:${random.value}
eureka.client.initial-instance-info-replication-interval-seconds=2
eureka.client.instance-info-replication-interval-seconds=2



#logging.level.com.ewolff.microservice: DEBUG
logging.level.org.springframework: DEBUG

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://ec2-35-161-128-6.us-west-2.compute.amazonaws.com:3306/customer?useSSL=false

# Username and password
spring.datasource.username = root
spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
